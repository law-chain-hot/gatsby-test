{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/pages/index.js"],"names":["Bio","data","useStaticQuery","site","siteMetadata","author","social","avatar","childImageSharp","fixed","className","BlogIndex","location","siteTitle","title","posts","allMarkdownRemark","nodes","length","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","to","itemProp","date","pageQuery"],"mappings":"6FAAA,+CA+DeA,IApDH,WAAO,IAAD,QACVC,EAAOC,yBAAe,aAwBhB,UAAGD,EAAKE,KAAKC,oBAAb,OAAG,EAAwBC,OAC3B,UAAGJ,EAAKE,KAAKC,oBAAb,OAAG,EAAwBE,OAExBL,SAAH,UAAGA,EAAMM,cAAT,iBAAG,EAAcC,uBAAjB,OAAG,EAA+BC,MAE9C,OACE,yBAAKC,UAAU,U,kCC1CnB,oIAqEeC,UA5DG,SAAC,GAAwB,IAAD,EAArBV,EAAqB,EAArBA,KAAMW,EAAe,EAAfA,SACnBC,GAAY,UAAAZ,EAAKE,KAAKC,oBAAV,eAAwBU,QAAxB,QACZC,EAAQd,EAAKe,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,kBAAC,IAAD,CAAQN,SAAUA,EAAUE,MAAOD,GACjC,kBAAC,IAAD,CAAKC,MAAM,cACX,kBAAC,IAAD,MACA,yLAUJ,kBAAC,IAAD,CAAQF,SAAUA,EAAUE,MAAOD,GACjC,kBAAC,IAAD,CAAKC,MAAM,cACX,kBAAC,IAAD,MACA,wBAAIK,MAAO,CAAEC,UAAU,QAAWV,UAAU,gBACzCK,EAAMM,KAAI,SAAAC,GACT,IAAMR,EAAQQ,EAAKC,YAAYT,OAASQ,EAAKE,OAAOC,KAEpD,OACE,wBAAIC,IAAKJ,EAAKE,OAAOC,KAAMf,UAAU,gBACnC,6BACEA,UAAU,2BACViB,WAAS,EACTC,SAAS,6BAET,kBAAC,OAAD,CAAMC,GAAIP,EAAKE,OAAOC,KAAMK,SAAS,MAAMpB,UAAU,IACnD,gCACE,4BACE,0BAAMoB,SAAS,YAAYhB,IAE7B,2BAAIQ,EAAKC,YAAYQ,SAa3B,oCAWP,IAAMC,EAAS,c","file":"component---src-pages-index-js-8a8994eb6b5367da11a2.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"gatsby-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50, quality: 95) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  const avatar = data?.avatar?.childImageSharp?.fixed\n\n  return (\n    <div className=\"bio\">\n      {/* {avatar && (\n        <Image\n          fixed={avatar}\n          alt={author?.name || ``}\n          className=\"bio-avatar\"\n          imgStyle={{\n            borderRadius: `50%`,\n          }}\n        />\n      )}\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n        </p>\n      )} */}\n    </div>\n  )\n}\n\nexport default Bio\n","import React, { Fragment } from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nimport \"./post-link.css\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }} className=\"post-list-ol\">\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug} className=\"post-list-li\">\n              <article\n                className=\"post-list-item post-link\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <Link to={post.fields.slug} itemProp=\"url\" className=\"\">\n                  <header>\n                    <h4>\n                      <span itemProp=\"headline\">{title}</span>\n                    </h4>\n                    <p>{post.frontmatter.date}</p>\n                  </header>\n                </Link>\n\n                {/* <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section> */}\n              </article>\n              <hr></hr>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}